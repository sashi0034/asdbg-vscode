class string{
	~string();
	string();
	string(const string&in);
	string& opAssign(const string&in);
	string& opAddAssign(const string&in);
	bool opEquals(const string&in) const;
	int opCmp(const string&in) const;
	string opAdd(const string&in) const;
	uint length() const;
	void resize(uint);
	bool isEmpty() const;
	uint8& opIndex(uint);
	const uint8& opIndex(uint) const;
	string& opAssign(double);
	string& opAddAssign(double);
	string opAdd(double) const;
	string opAdd_r(double) const;
	string& opAssign(float);
	string& opAddAssign(float);
	string opAdd(float) const;
	string opAdd_r(float) const;
	string& opAssign(int64);
	string& opAddAssign(int64);
	string opAdd(int64) const;
	string opAdd_r(int64) const;
	string& opAssign(uint64);
	string& opAddAssign(uint64);
	string opAdd(uint64) const;
	string opAdd_r(uint64) const;
	string& opAssign(bool);
	string& opAddAssign(bool);
	string opAdd(bool) const;
	string opAdd_r(bool) const;
	string substr(uint start = 0, int count = - 1) const;
	int findFirst(const string&in, uint start = 0) const;
	int findFirstOf(const string&in, uint start = 0) const;
	int findFirstNotOf(const string&in, uint start = 0) const;
	int findLast(const string&in, int start = - 1) const;
	int findLastOf(const string&in, int start = - 1) const;
	int findLastNotOf(const string&in, int start = - 1) const;
	void insert(uint pos, const string&in other);
	void erase(uint pos, int count = - 1);
}
class array<T>{
	T& opIndex(uint index);
	const T& opIndex(uint index) const;
	T[]& opAssign(const T[]&in);
	void insertAt(uint index, const T&in value);
	void insertAt(uint index, const T[]&inout arr);
	void insertLast(const T&in value);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	uint length() const;
	void reserve(uint length);
	void resize(uint length);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void reverse();
	int find(const T&in value) const;
	int find(uint startAt, const T&in value) const;
	int findByRef(const T&in value) const;
	int findByRef(uint startAt, const T&in value) const;
	bool opEquals(const T[]&in) const;
	bool isEmpty() const;
	void sort(T[]::less&in, uint startAt = 0, uint count = uint ( - 1 ));
	funcdef bool less(const T&in, const T&in);
}
class any{
	any& opAssign(any&in);
	void store(?&in);
	void store(const int64&in);
	void store(const double&in);
	bool retrieve(?&out);
	bool retrieve(int64&out);
	bool retrieve(double&out);
}
class weakref<T>{
	~weakref();
	weakref(int&in);
	weakref(int&in, T@);
	T@ opImplCast();
	T@ get() const;
	weakref<T>& opHndlAssign(const weakref<T>&in);
	weakref<T>& opAssign(const weakref<T>&in);
	bool opEquals(const weakref<T>&in) const;
	weakref<T>& opHndlAssign(T@);
	bool opEquals(const T@) const;
}
class const_weakref<T>{
	~const_weakref();
	const_weakref(int&in);
	const_weakref(int&in, const T@);
	const T@ opImplCast() const;
	const T@ get() const;
	const_weakref<T>& opHndlAssign(const const_weakref<T>&in);
	const_weakref<T>& opAssign(const const_weakref<T>&in);
	bool opEquals(const const_weakref<T>&in) const;
	const_weakref<T>& opHndlAssign(const T@);
	bool opEquals(const T@) const;
	const_weakref<T>& opHndlAssign(const weakref<T>&in);
	bool opEquals(const weakref<T>&in) const;
}
class dictionaryValue{
	~dictionaryValue();
	dictionaryValue();
	dictionaryValue& opAssign(const dictionaryValue&in);
	dictionaryValue& opHndlAssign(const ?&in);
	dictionaryValue& opHndlAssign(const dictionaryValue&in);
	dictionaryValue& opAssign(const ?&in);
	dictionaryValue& opAssign(double);
	dictionaryValue& opAssign(int64);
	void opCast(?&out);
	void opConv(?&out);
	int64 opConv();
	double opConv();
}
class dictionary{
	dictionary& opAssign(const dictionary&in);
	void set(const string&in, const ?&in);
	bool get(const string&in, ?&out) const;
	void set(const string&in, const int64&in);
	bool get(const string&in, int64&out) const;
	void set(const string&in, const double&in);
	bool get(const string&in, double&out) const;
	bool exists(const string&in) const;
	bool isEmpty() const;
	uint getSize() const;
	bool delete(const string&in);
	void deleteAll();
	string[]@ getKeys() const;
	dictionaryValue& opIndex(const string&in);
	const dictionaryValue& opIndex(const string&in) const;
}
class file{
	int open(const string&in, const string&in);
	int close();
	int getSize() const;
	bool isEndOfFile() const;
	string readString(uint);
	string readLine();
	int64 readInt(uint);
	uint64 readUInt(uint);
	float readFloat();
	double readDouble();
	int writeString(const string&in);
	int writeInt(int64, uint);
	int writeUInt(uint64, uint);
	int writeFloat(float);
	int writeDouble(double);
	int getPos() const;
	int setPos(int);
	int movePos(int);
	bool mostSignificantByteFirst;
}
class grid<T>{
	T& opIndex(uint, uint);
	const T& opIndex(uint, uint) const;
	void resize(uint width, uint height);
	uint width() const;
	uint height() const;
}
class datetime{
	datetime();
	datetime(const datetime&in);
	datetime(uint, uint, uint, uint = 0, uint = 0, uint = 0);
	datetime& opAssign(const datetime&in);
	uint get_year() const;
	uint get_month() const;
	uint get_day() const;
	uint get_hour() const;
	uint get_minute() const;
	uint get_second() const;
	bool setDate(uint year, uint month, uint day);
	bool setTime(uint hour, uint minute, uint second);
	int64 opSub(const datetime&in) const;
	datetime opAdd(int64 seconds) const;
	datetime opAdd_r(int64 seconds) const;
	datetime& opAddAssign(int64 seconds);
	datetime opSub(int64 seconds) const;
	datetime opSub_r(int64 seconds) const;
	datetime& opSubAssign(int64 seconds);
	bool opEquals(const datetime&in) const;
	int opCmp(const datetime&in) const;
}
class filesystem{
	bool changeCurrentPath(const string&in);
	string getCurrentPath() const;
	string[]@ getDirs() const;
	string[]@ getFiles() const;
	bool isDir(const string&in) const;
	bool isLink(const string&in) const;
	int64 getSize(const string&in) const;
	int makeDir(const string&in);
	int removeDir(const string&in);
	int deleteFile(const string&in);
	int copyFile(const string&in, const string&in);
	int move(const string&in, const string&in);
	datetime getCreateDateTime(const string&in) const;
	datetime getModifyDateTime(const string&in) const;
}
string formatInt(int64 val, const string&in options = "", uint width = 0);
string formatUInt(uint64 val, const string&in options = "", uint width = 0);
string formatFloat(double val, const string&in options = "", uint width = 0, uint precision = 0);
int64 parseInt(const string&in, uint base = 10, uint&out byteCount = 0);
uint64 parseUInt(const string&in, uint base = 10, uint&out byteCount = 0);
double parseFloat(const string&in, uint&out byteCount = 0);
float fpFromIEEE(uint);
uint fpToIEEE(float);
double fpFromIEEE(uint64);
uint64 fpToIEEE(double);
bool closeTo(float, float, float = 0.00001f);
bool closeTo(double, double, double = 0.0000000001);
float cos(float);
float sin(float);
float tan(float);
float acos(float);
float asin(float);
float atan(float);
float atan2(float, float);
float cosh(float);
float sinh(float);
float tanh(float);
float log(float);
float log10(float);
float pow(float, float);
float sqrt(float);
float ceil(float);
float abs(float);
float floor(float);
float fraction(float);
void throw(const string&in);
string getExceptionInfo();
void print(const string&in message);
void println(const string&in message);
void sleep(int milliseconds);
